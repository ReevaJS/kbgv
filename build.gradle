plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
    id 'maven-publish'
}

group 'com.reevajs'
version '1.0.0'
def RELEASE = true

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.1'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

jar {
    from sourceSets.main.output
}

task jarWithSources(type: Jar) {
    classifier('sources')
    from sourceSets.main.allSource
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def publishingUsername = null
def publishingPassword = null

if (project.hasProperty("IS_CI")) {
    publishingUsername = System.getenv("REPOSILITE_USER")
    publishingPassword = System.getenv("REPOSILITE_PASSWORD")
} else if (project.hasProperty("reposilite_user")) {
    publishingUsername = project.property("reposilite_user")
    publishingPassword = project.property("reposilite_password")
}

if (publishingUsername != null && publishingPassword != null) {
    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.name

                if (RELEASE) {
                    version = project.version
                } else {
                    version = getGitHash() + "-SNAPSHOT"
                }

                artifact jarWithSources

                from components.kotlin
            }
        }

        repositories {
            maven {
                name 'reposilite'
                url = 'https://repo.mattco.me/' + (RELEASE ? 'releases' : 'snapshots')

                credentials {
                    username = publishingUsername
                    password = publishingPassword
                }

                authentication {
                    basic(BasicAuthentication)
                }
            }
        }
    }
}
